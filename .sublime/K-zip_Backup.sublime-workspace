{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"archi",
				"archive_name"
			],
			[
				"print",
				"print_info"
			],
			[
				"f",
				"fUPDATE"
			],
			[
				"actio",
				"action_mode"
			],
			[
				"arc",
				"archive_name"
			],
			[
				"get",
				"getPassword"
			],
			[
				"gt",
				"getPassword"
			],
			[
				"set",
				"setattr〔function〕"
			],
			[
				"config",
				"configFile"
			],
			[
				"inp",
				"inpArgs〔variable〕"
			],
			[
				"yaml",
				"yaml_filename〔argument〕"
			],
			[
				"zip",
				"zipfile"
			],
			[
				"my",
				"my_data〔variable〕"
			],
			[
				"add",
				"addFolder"
			],
			[
				"sub_",
				"sub_dirs"
			],
			[
				"file",
				"filename"
			],
			[
				"sub",
				"sub_dirs"
			],
			[
				"py",
				"pyBinDir"
			],
			[
				"max",
				"max_files"
			],
			[
				"Pa",
				"ParseInput"
			],
			[
				"__",
				"__name__ == '__main__':〔variable〕"
			],
			[
				"cu",
				"curr_dir"
			],
			[
				"rotatio",
				"rotation_filesize"
			],
			[
				"rot",
				"rotation_nfiles"
			],
			[
				"log",
				"logArgs"
			],
			[
				"_log",
				"_log_time"
			],
			[
				"now",
				"now_date"
			],
			[
				"pkg",
				"pkg_len"
			],
			[
				"tra",
				"set_trace〔function〕"
			],
			[
				"_get",
				"_getCaller〔function〕"
			],
			[
				"type",
				"types"
			],
			[
				"foun",
				"found_dir"
			],
			[
				"_rotat",
				"_rotation_max_file_size"
			],
			[
				"_ro",
				"_rotation_max_files"
			],
			[
				"sel",
				"self._filename"
			],
			[
				"_file",
				"_file_dest"
			],
			[
				"targ",
				"targetDir"
			],
			[
				"tag",
				"targetDir"
			],
			[
				"consol",
				"console_prefix"
			],
			[
				"to",
				"to_console"
			],
			[
				"rea",
				"reason"
			],
			[
				"aut",
				"auth_list"
			],
			[
				"_alias",
				"_alias_name"
			],
			[
				"self",
				"self._alias_exec"
			],
			[
				"name",
				"namespace"
			],
			[
				"nam",
				"namespace"
			],
			[
				"ip_",
				"ip_addresses"
			],
			[
				"this",
				"this_primary_IP"
			],
			[
				"remote",
				"remote_port"
			],
			[
				"_",
				"_primary_IP"
			],
			[
				"_pri",
				"_private_key_file"
			],
			[
				"_pr",
				"_private_key_file"
			],
			[
				"split",
				"splitText"
			],
			[
				"spli",
				"split_lines"
			],
			[
				"ipadd",
				"ipaddrlist"
			],
			[
				"remo",
				"remote_reverse_port"
			],
			[
				"debu",
				"debug3"
			],
			[
				"valid",
				"valid_lines"
			],
			[
				"exec",
				"exec_Command"
			],
			[
				"she",
				"shellRun"
			],
			[
				"ip",
				"ip_address"
			],
			[
				"ssh",
				"sshRun"
			],
			[
				"exit",
				"exit_on_error"
			],
			[
				"line",
				"lineNumber"
			],
			[
				"s",
				"set_trace〔function〕"
			],
			[
				"level",
				"levels"
			],
			[
				"pdb",
				"pdb.set_trace"
			],
			[
				"ss",
				"ssh2_class"
			],
			[
				"conne",
				"conn_timeout"
			],
			[
				"inter",
				"internal_ip_addresses〔variable〕"
			],
			[
				"ex",
				"external_hostname"
			],
			[
				"sess",
				"session_name〔variable〕"
			],
			[
				"pri",
				"private_key_file"
			],
			[
				"remot",
				"remoteIP〔variable〕"
			],
			[
				"host",
				"hostname"
			],
			[
				"acco",
				"accout_password"
			],
			[
				"accou",
				"account_name"
			],
			[
				"mail",
				"mailData〔argument〕"
			],
			[
				"yam",
				"yaml_data"
			],
			[
				"dict",
				"dictToFile〔function〕"
			],
			[
				"attache",
				"attached_files"
			],
			[
				"sm",
				"smtp.gmail.com"
			],
			[
				"REM",
				"REMOTE_CHECK_CMD"
			],
			[
				"crypt",
				"crypto"
			],
			[
				"md",
				"md5_val〔variable〕"
			],
			[
				"has",
				"hasattr〔function〕"
			],
			[
				"source",
				"source_dir〔argument〕"
			],
			[
				"return",
				"returncode"
			],
			[
				"cre",
				"create_7zip〔function〕"
			],
			[
				"recu",
				"recursive"
			],
			[
				"run",
				"runCommand〔function〕"
			],
			[
				"_dir",
				"_dir2zip"
			],
			[
				"dest",
				"dest_dir"
			],
			[
				"Pars",
				"ParseInput〔function〕"
			],
			[
				"hash",
				"hashlib〔module〕"
			],
			[
				"exe",
				"executeCommand〔function〕"
			],
			[
				"coma",
				"command〔argument〕"
			],
			[
				"dir",
				"dir_name"
			],
			[
				"is",
				"isdir〔function〕"
			],
			[
				"excl",
				"exclude_list"
			],
			[
				"exc",
				"exclude_list〔variable〕"
			],
			[
				"ext",
				"extensions"
			],
			[
				"B",
				"BASE_CMD"
			],
			[
				"process",
				"processVideo"
			],
			[
				"L",
				"LnPrompt〔module〕"
			],
			[
				"mp",
				"mpoint"
			],
			[
				"g",
				"greenH"
			],
			[
				"req",
				"req_device_name〔variable〕"
			],
			[
				"device",
				"device_list〔argument〕"
			],
			[
				"confi",
				"config_dev〔variable〕"
			],
			[
				"mount",
				"mountpoint"
			],
			[
				"real",
				"real_dir"
			],
			[
				"devi",
				"device_found〔variable〕"
			],
			[
				"moun",
				"mount_point〔variable〕"
			],
			[
				"convert",
				"convert_bytes〔module〕"
			],
			[
				"devic",
				"device_data〔variable〕"
			],
			[
				"stri",
				"strip_field"
			],
			[
				"prj",
				"prj_name〔variable〕"
			],
			[
				"base",
				"base_dir"
			],
			[
				"COMM",
				"COMMIT_0"
			],
			[
				"ba",
				"baseConfig"
			],
			[
				"Ln",
				"LnLogger"
			],
			[
				"LnL",
				"LnLib"
			],
			[
				"colo",
				"color_name〔argument〕"
			],
			[
				"common",
				"common_options"
			],
			[
				"ski",
				"skip_field〔argument〕"
			],
			[
				"singl",
				"single_line"
			],
			[
				"rege",
				"regex_OR〔function〕"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/conf/zipBackup.yml",
			"settings":
			{
				"buffer_size": 1096,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/__main__.py",
			"settings":
			{
				"buffer_size": 3125,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# updated by ...: Loreto Notarantonio\n# Version ......: 14-07-2020 16.05.02\n#\n\nimport sys; sys.dont_write_bytecode=True\nimport os\nimport types  # per SimpleNamespace\nimport pdb\nfrom   pathlib import Path # https://docs.python.org/3/library/pathlib.html\nimport zipfile # https://docs.python.org/3.6/library/zipfile.html\nimport pyzipper # https://pypi.org/project/pyzipper/\nimport shutil # https://docs.python.org/3/library/shutil.html\nimport datetime\nfrom io import BytesIO\n\n\nclass nullLogger():\n    def dummy(self,  title, *args, **kwargs): pass\n    critical=error=warning=info=debug1=debug2=debug3=dummy\n\n# from LnLib.LnColor import LnColor; C=LnColor()\n# https://gist.github.com/msunardi/6527ac4c3b08975d30f83cd8aa80e147\n# https://pymotw.com/2/zipfile/\n\nclass LnZipClass:\n    '''\n    Open a ZIP file,\n        where file can be:\n           - a path to a file (a string),\n           - a file-like object\n           - a path-like object\n    The mode parameter should be:\n        'r' to read an existing file,\n        'w' to truncate and write a new file,\n        'a' to append to an existing file, or\n        'x' to exclusively create and write a new file.\n    If mode is 'x' and file refers to an existing file, a FileExistsError will be raised.\n    If mode is 'a' and file refers to an existing ZIP file, then additional files are added to it.\n    '''\n    # def __init__(self, filename, mode, action_mode='update', fSYNC=False, secret_password=None, compression=zipfile.ZIP_STORED, logger=None):\n    def __init__(self, filename, secret_password=None, backup_dir=None, logger=None):\n\n        self.TAB0=''\n        self.TAB1=' '*2\n        self.TAB2=' '*4\n        self.TAB3=' '*6\n        self.TAB4=' '*8\n        self.logger=logger if logger else nullLogger()\n        self._zf=None\n        self._backup_dir=backup_dir\n\n        if isinstance(secret_password, str):\n            self._secret_password=secret_password.encode('utf-8')\n        else:\n            self._secret_password=secret_password\n\n        try:\n            import zlib\n            self._compression = zipfile.ZIP_DEFLATED # compression_type=8\n        except:\n            self._compression = zipfile.ZIP_STORED # compression_type=0\n        import pdb; pdb.set_trace() # by Loreto\n        self.fUPDATE=False\n        self.fMIRROR=False\n\n        if action_mode=='update':\n            self._mode='a'\n            self.fUPDATE=True\n        elif action_mode=='mirror':\n            self._mode='x'\n            self.fMIRROR=True\n        else:\n            self._mode='r'\n\n        # self._filename=filename\n        # self.old_archive=filename\n        self.new_archive=BytesIO()\n        self._filename=BytesIO()\n\n        self.open()\n\n\n    #################################################\n    #\n    #################################################\n    def open(self):\n        self.close()\n\n        if self._secret_password:\n            self.logger.info(f'opening file: {self._filename} {self._mode} ... using AESZipFile')\n            self._zf=pyzipper.AESZipFile(filename, mode=self._mode,\n                         compression=pyzipper.ZIP_LZMA)\n            self._zf.setpassword(self._secret_password)\n            self._zf.setencryption(pyzipper.WZ_AES, nbits=256)\n        else:\n            self.logger.info(f'{self.TAB0}opening file: {self._filename} {self._mode} ... using zipFile')\n            self._zf=zipfile.ZipFile(self._filename, mode=self._mode, compression=self._compression)\n\n\n    #################################################\n    #\n    #################################################\n    def is_zipfile(self, filename):\n        return zipfile.is_zipfile(filename)\n\n    #################################################\n    #\n    #################################################\n    def getInfo(self, archive_name):\n        try:\n            info=self._zf.getinfo(str(archive_name))\n        except:\n            info=None\n        return info\n\n    #################################################\n    #\n    #################################################\n    def print_info(self):\n        for info in self._zf.infolist():\n            print(info.filename)\n            print('\\tcompress_type:\\t', info.compress_type)\n            print('\\tModified:\\t', datetime.datetime(*info.date_time))\n            print('\\tSystem:\\t\\t', info.create_system, '(0 = Windows, 3 = Unix)')\n            print('\\tZIP version:\\t', info.create_version)\n            print('\\tCompressed:\\t', info.compress_size, 'bytes')\n            print('\\tUncompressed:\\t', info.file_size, 'bytes')\n            print('\\tComment:\\t', info.comment)\n            print()\n            # print(info)\n\n        print()\n        for name in self._zf.namelist():\n            print('     ', name)\n        print()\n\n    @property\n    def filename(self):\n        return self._filename\n\n    def close(self):\n        if self._zf:\n            self._zf.close()\n            self.logger.info(f'{self.TAB1}closed file: {self._filename}.')\n\n\n    #################################################\n    # '*' solo dirs\n    # '*/*' solo files\n    # '**/*' tutto\n    #################################################\n    def addFolder(self, root_dir, dir_name, include=['**/*'], exclude=[], compression=None):\n        # infolist=self._zf.infolist()\n        # fUPDATE=True # aggiorna file più vecchi senza toccare gli altri\n        # fMIRROR=True # Fa il mirror\n        compression=compression if compression else self._compression\n        my_dir=Path(root_dir / dir_name)\n        self.logger.info(f'{self.TAB1}path {my_dir} processing')\n        my_list=[]\n        for pattern in include:\n            _list = list(my_dir.glob(pattern))\n            my_list.extend(_list)\n\n        # remove duplicates ... anche list( dict.fromkeys(_val)\n        # my_list=list( dict.fromkeys(my_list) )\n        my_list=list(set(my_list))\n        if exclude:\n            for path in my_list[:]:\n                for ecl_pattern in exclude:\n                    if ecl_pattern in str(path): # anche path.stem\n                        my_list.remove(path)\n\n        skip_compression=['.jpg', '.zip', '.xdocx']\n        for file in my_list:\n            archive_name=file.relative_to(root_dir)\n            self.logger.debug2(f'{self.TAB2}archive_name', archive_name)\n            import pdb; pdb.set_trace() # by Loreto\n\n            if self.fUPDATE:\n                info=self.getInfo(archive_name)\n                if info:\n                    curr_mtime=file.stat().st_mtime\n                    arch_mtime=datetime.datetime(*info.date_time).timestamp() # epoch time\n                    # - epoch --> human\n                    # human_date=time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(arch_mtime))\n                    # pdb.set_trace()\n                    if curr_mtime>arch_mtime:\n                        _compression_type=zipfile.ZIP_STORED if file.suffix.lower() in skip_compression else compression\n                        self._zf.write(file, arcname=archive_name, compress_type=_compression_type)\n                        if file.is_file() and file.stat().st_size:\n                            info=self._zf.getinfo(str(archive_name))\n                            percent=1-(info.compress_size/info.file_size)\n                            self.logger.debug3(f'{self.TAB3}- comp_type: {info.compress_type}')\n                            self.logger.debug3(f'{self.TAB3}- comp_rate: {abs(percent):2.0%}')\n                    else:\n                       self.logger.debug2(f'{self.TAB3}already exists.')\n            elif self.fMIRROR:\n                info=self.getInfo(archive_name)\n                if info:\n                    curr_mtime=file.stat().st_mtime\n                    arch_mtime=datetime.datetime(*info.date_time).timestamp() # epoch time\n                    # - epoch --> human\n                    # human_date=time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(arch_mtime))\n                    # pdb.set_trace()\n                    if curr_mtime>arch_mtime:\n                        _compression_type=zipfile.ZIP_STORED if file.suffix.lower() in ['.jpg', '.zip', '.xdocx'] else compression\n                        self._zf.write(file, arcname=archive_name, compress_type=_compression_type)\n                        if file.is_file() and file.stat().st_size:\n                            info=self._zf.getinfo(str(archive_name))\n                            percent=1-(info.compress_size/info.file_size)\n                            self.logger.debug3(f'{self.TAB3}- comp_type: {info.compress_type}')\n                            self.logger.debug3(f'{self.TAB3}- comp_rate: {abs(percent):2.0%}')\n                    else:\n                       self.logger.debug2(f'{self.TAB3}already exists.')\n\n\n\n\n            # print(info)\n            # print('\\tcompress_type:\\t', info.compress_type)\n            # print('\\tModified:\\t', datetime.datetime(*info.date_time))\n            # print('\\tSystem:\\t\\t', info.create_system, '(0 = Windows, 3 = Unix)')\n            # print('\\tZIP version:\\t', info.create_version)\n            # print('\\tCompressed:\\t', info.compress_size, 'bytes')\n            # print('\\tUncompressed:\\t', info.file_size, 'bytes')\n            # print('\\tComment:\\t', info.comment)\n            # print()\n\n        self.logger.info(f'{self.TAB1}path {my_dir} completed')\n        return\n\n    #################################################\n    #\n    #################################################\n    @staticmethod\n    # def oneZipPerFolder(root_dir, target_dir, mode='w', action_mode=args.action, sub_dirs=[], include=['**/*'], exclude=[], fSYNC=False, secret_password=None, logger=None):\n    def oneZipPerFolder(root_dir, target_dir, action_mode='update', sub_dirs=[], include=['**/*'], exclude=[], secret_password=None, logger=None):\n\n        if not sub_dirs or '*' in sub_dirs:\n            sub_dirs = [e.stem for e in root_dir.iterdir() if e.is_dir()]\n            files = [e for e in root_dir.iterdir() if e.is_file()]\n        else:\n            files=[]\n\n        # pdb.set_trace()\n        for dir_name in sorted(sub_dirs):\n            _target_dir=Path(f'{target_dir}/{root_dir.stem}')\n            _target_dir.mkdir(parents=False, exist_ok=True)\n\n            zip_name=Path(f'{_target_dir}/{dir_name}.zip')\n            myZip=LnZipClass(zip_name, action_mode=action_mode, secret_password=secret_password, logger=logger)\n            myZip.addFolder(root_dir, dir_name, include=include, exclude=exclude)\n            myZip.close()\n            # print(f'file: {myZip.filename} has been closed')\n\n'''\n\nfrom zipfile import ZipFile\nfrom io import BytesIO\n\ndef create_zip_v1():\n    \"\"\"\n    returns: zip archive\n    \"\"\"\n    archive = BytesIO()\n\n    with ZipFile(archive, 'w') as zip_archive:\n        # Create three files on zip archive\n        with zip_archive.open('docker/docker-compose.yaml', 'w') as file1:\n            file1.write(b'compose-file-content...')\n\n        with zip_archive.open('app/app-config.json', 'w') as file2:\n            file2.write(b'app-config-content...')\n\n        with zip_archive.open('root-config.json', 'w') as file3:\n            file3.write(b'root-config-content...')\n\n\n    return archive\n\narchive = create_zip_v1()\n\n# Flush archive stream to a file on disk\nwith open('config.zip', 'wb') as f:\n    f.write(archive.getbuffer())\n\narchive.close()s\ndef update_or_insert(path, data):\n    \"\"\"\n    Param: path -> file in archive\n    Param: data -> data to be updated\n\n    Returns a new zip file with the updated content\n    for the given path\n    \"\"\"\n    new_zip = BytesIO()\n\n    with ZipFile('config.zip', 'r') as old_archive:\n        with ZipFile(new_zip, 'w') as new_archive:\n            for item in old_archive.filelist:\n                # If you spot an existing file, create a new object\n                if item.filename == path:\n                    zip_inf = ZipInfo(path)\n                    new_archive.writestr(zip_inf, data)\n                else:\n                    # Copy other contents as it is\n                    new_archive.writestr(item, old_archive.read(item.filename))\n\n    return new_zip\n\nnew_zip = update_or_insert(\n    'docker/docker-compose.yaml',\n    b'docker-compose-file-content-new'\n)\n\n# Flush new zip to disk\nwith open('config.zip', 'wb') as f:\n    f.write(new_zip.getbuffer())\n\nnew_zip.close()\n'''\n\nif __name__ == '__main__':\n\n    root_dir='/mnt/k/Filu/LnDisk/Loreto'\n    secret_password=b'ciao'\n    secret_password=None\n    root_dir=Path('/mnt/k/Filu/LnDisk/Lesla')\n    target_dir='/mnt/k/temp'\n\n    sub_dirs = ['Loreto', 'Lesla']\n    sub_dirs = []\n    LnZipClass.oneZipPerFolder(root_dir, target_dir, sub_dirs=sub_dirs, include=['**/*'], exclude=[])\n\n\n\n\n",
			"settings":
			{
				"buffer_size": 12626,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/LnLib/zipClass.py",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				"Syntax Check"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ren",
				"File: Rename"
			],
			[
				"dupl",
				"File: Duplicate"
			],
			[
				"du",
				"File: Duplicate"
			],
			[
				"dup",
				"File: Duplicate"
			],
			[
				"clip",
				"Text Pastry: Show Clipboard Viewer"
			],
			[
				"rene",
				"Rename File"
			],
			[
				"sort",
				"Sort Lines by Selection"
			],
			[
				"comp",
				"Compare with..."
			],
			[
				"dupli",
				"File: Duplicate"
			],
			[
				"compa",
				"Compare with..."
			],
			[
				"rena",
				"File: Rename"
			],
			[
				"rename",
				"Rename File"
			],
			[
				"move",
				"File: Move"
			],
			[
				"renam",
				"File: Rename"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"markdo",
				"Preferences: MarkdownEditing Settings – Default"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"mark",
				"Set Syntax: Markdown"
			],
			[
				"del",
				"File: Delete"
			],
			[
				"inc",
				"Increment Selection"
			],
			[
				"in",
				"Increment Selection"
			],
			[
				"incre",
				"Increment Selection"
			],
			[
				"i",
				"Increment Selection"
			],
			[
				"dele",
				"File: Delete"
			],
			[
				"re",
				"File: Rename"
			],
			[
				"json",
				"Pretty JSON: Format and Sort JSON"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"syn",
				"Side Bar: Enable Syncing"
			],
			[
				"color hi",
				"Color Scheme Editor: Goto next matching scope"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"prv",
				"PackageResourceViewer: Open Resource"
			],
			[
				"them",
				"UI: Select Theme"
			],
			[
				"pvr",
				"PackageResourceViewer: Open Resource"
			],
			[
				"colo",
				"UI: Select Color Scheme"
			],
			[
				"box",
				"Boxy Theme: Configuration"
			],
			[
				"boxy",
				"Boxy Theme: Preferences"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"color",
				"Color Scheme Editor: Goto next matching scope"
			],
			[
				"vrc",
				"PackageResourceViewer: Open Resource"
			],
			[
				"case",
				"Convert Case: Title Case"
			],
			[
				"git",
				"GitHub: Open Starred Gist in Editor"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"jnj",
				"Set Syntax: Jinja2"
			],
			[
				"anaco",
				"Anaconda: Vagrant Status"
			],
			[
				"enab",
				"Package Control: Enable Package"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"disab",
				"Package Control: Disable Package"
			],
			[
				"anaconda",
				"Anaconda: Goto object definition"
			],
			[
				"anaconda sho",
				"Anaconda: Show error list"
			],
			[
				"insal",
				"Package Control: Install Package"
			],
			[
				"instak",
				"Package Control: Install Package"
			],
			[
				"ana",
				"Anaconda: McCabe complexity check"
			],
			[
				"anaconda sh",
				"Anaconda: Show error list"
			],
			[
				"goto",
				"Anaconda: Goto object definition"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"de",
				"File: Delete"
			],
			[
				"todo",
				"TodoReview: Project Files"
			],
			[
				"incr",
				"Increment Selection"
			],
			[
				"sftp",
				"SFTP: Edit Remote Mapping…"
			],
			[
				"sft",
				"SFTP: Browse Server…"
			],
			[
				"tod",
				"TodoReview: Open Files"
			],
			[
				"match",
				"BracketHighlighter: Find Matching Offscreen Bracket"
			]
		],
		"width": 476.0
	},
	"console":
	{
		"height": 249.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/conf",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/LnLib",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/Source"
	],
	"file_history":
	[
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/LnLib/LnPathMonkeyFunctions.py",
		"/X/home/pi/GIT-REPO/Python/lnLib/.git/config",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/LnLib/zipClass.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/LnLib/LnMonkeyFunctions.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/Source/ParseInput.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/LnLib/LnLogger.py",
		"/K/Filu/LnDisk/LnFree/Editors/SublimeText_3/Data/Packages/User/Ln_RunMe.py",
		"/K/Filu/LnDisk/LnFree/Editors/SublimeText_3/Data/Packages/User/Ln_InsertPdbTrace.py",
		"/K/Filu/LnDisk/LnFree/Editors/SublimeText_3/Data/Packages/User/Ln_InsertAuthorVersion.py",
		"/K/Filu/LnDisk/LnFree/Editors/SublimeText_3/Data/Packages/User/Ln_InsertAuthorDateComment.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/LnLib/yamlLoader_V2.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/conf/zipBackup.yml",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/Source/getPassword.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnStartProgram/Source/Utils/LnYamlLoader.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnLib/yamlLoaderLn/LnYamlLoader.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnLib/yamlLoaderLn/yamlLoader_V2.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnLib/parseInputLn/ParseInput_Color-subparser_V05.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/Source/ParseInput_prev.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/LnLib/LnColor.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/LnLib/loadYaml.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnLib/yamlLoaderLn/LnYamlLoader_V2.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/LnLib/ReadConfigurationFile.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/__main__.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnStartProgram/conf/LnStartProgram.yml",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnLib/pyUtils/ReadConfigurationFile.py",
		"/K/Filu/LnDisk/LnFree/Editors/SublimeText_3/Data/Packages/User/sftp_servers/wsl_2222.json",
		"/K/Filu/LnDisk/LnFree/Editors/SublimeText_3/Data/Packages/User/sftp_servers/LnPi23_51022.json",
		"/K/Filu/LnDisk/GIT-REPO/sublime_sftp_wsl",
		"/K/Filu/LnDisk/GIT-REPO/gitUtils/RepositoryStatus.yml",
		"/K/Filu/LnDisk/GIT-REPO/gitUtils/.git/config",
		"/K/Filu/LnDisk/GIT-REPO/gitUtils/lcommit",
		"/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/.git/config",
		"/K/Filu/LnDisk/GIT-REPO/Python/pyScript/zip_Backup/Source/ParseInput.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/pyScript/zip_Backup/__main__.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/pyScript/zip_Backup/Source/runCommand.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/pyScript/zip_Backup/Source/create_zip.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/pyScript/zip_Backup/Source/create_7z.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/pyScript/zip_Backup/Source/getPassword.py",
		"/X/home/pi/GIT-REPO/gitUtils/lcommit",
		"/X/home/pi/GIT-REPO/gitUtils/lzip_build",
		"/K/Filu/LnDisk/LnFree/SynchBackup/FreeFileSync/LnFreeFileSync.sh",
		"/K/Filu/LnDisk/GIT-REPO/Python/pyScript/.git/config",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnLib/.git/config",
		"/K/Filu/LnDisk/GIT-REPO/Scripts/Bash/zip_directory.sh",
		"/X/home/pi/GIT-REPO/gitUtils/lbuild",
		"/X/home/pi/GIT-REPO/Python/pyScript/.git/config",
		"/X/home/pi/GIT-REPO/gitUtils/lzip",
		"/X/home/pi/GIT-REPO/Python/LnLib/.git/config",
		"/X/home/pi/GIT-REPO/Python/LnLib/monkeyFunctions/LnMonkeyFunctions.py",
		"/X/home/pi/GIT-REPO/Python/LnLib/rotateFile/Source/rotateFile.py",
		"/X/home/pi/GIT-REPO/gitUtils/lcommit.dat",
		"/X/home/pi/GIT-REPO/Python/pythonLnLib/rotateFile/__main__.py",
		"/X/home/pi/GIT-REPO/Python/pythonLnLib/rotateFile/Source/rotateFile.py",
		"/X/home/pi/GIT-REPO/Python/pythonLnLib/.git/config",
		"/X/home/pi/GIT-REPO/Python/pythonLnLib/rotateFile/LnLib/LnColor.py",
		"/X/home/pi/GIT-REPO/Python/pythonLnLib/rotateFile/Source/ParseInput.py",
		"/X/home/pi/GIT-REPO/Python/pythonLnLib/rotateFile/__main___001.py",
		"/X/home/pi/GIT-REPO/Python/pythonLnLib/rotateFile/LnLib/colorLn/LnColor.py",
		"/X/home/pi/GIT-REPO/Python/pythonLnLib/mailLn/Mail_Parametrizzata.py",
		"/X/GIT-REPO/Python/pythonLnLib/pyScript/rotateFile.py",
		"/X/GIT-REPO/Python/pythonLnLib/.git/config",
		"/X/GIT-REPO/gitUtils/lcommit.dat",
		"/X/GIT-REPO/Python/pythonLnLib/pyScript/ssh_remote_tunnel.py",
		"/X/GIT-REPO/Python/pythonLnLib/monkeyFunctions/LnMonkeyFunctions.py",
		"/X/GIT-REPO/gitUtils/lcommit",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/LnLib/LnLogger.py",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/Source/ParseInput.py",
		"/X/home/pi/GIT-REPO/Python/LnPythonLib/LnPyUtils/nameSpace.py",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/LnLib/ssh2_class.py",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/__main__.py",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/LnLib/LnMonkeyFunctions.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnPythonLib/LnMonkeyFunctions/LnMonkeyFunctions.py",
		"/X/home/pi/GIT-REPO/Python/LnPythonLib_2020_06/Logger/LnLogger.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnPythonLib_2020_06/Logger/LnLogger_V2018-06.py",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/conf/sshReverseTunnel.yml",
		"/X/home/pi/GIT-REPO/Python/LnPythonLib/LnPyUtils/splitString.py",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/Source/ssh2_class.py",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/LnLib/run_sh_command.py",
		"/X/home/pi/GIT-REPO/Python/LnPythonLib/LnColor/LnColor.py",
		"/X/home/pi/GIT-REPO/Python/LnPythonLib_2020_06/SSH/LnSSH_Class.py",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/Source/ssh2_runCommand.py",
		"/X/home/pi/GIT-REPO/Python/LnPythonLib/LnLogger/nullLogger.py",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/LnLib/sh_command.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnPythonLib/LnPyUtils/sh_command.py",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnPythonLib/LnPyUtils/run_sh.py",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/ssh_Reverse_tunnel.sh",
		"/X/home/pi/GIT-REPO/Python/PyMount/Source/ParseInput.py",
		"/X/home/pi/GIT-REPO/Python/sshRemoteTunnel/.git/config",
		"/K/Filu/LnDisk/LnStart/LnToDo.ini",
		"/K/Filu/LnDisk/GIT-REPO/Python/LnPythonLib/.git/config",
		"/X/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/__main__.py",
		"/K/Filu/LnDisk/GIT-REPO/LnDOC/IFTTT/Create Widget.txt",
		"/X/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/Source/ssh2_runCommand.py",
		"/X/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/conf/pySSH.yml",
		"/X/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/Source/ParseInput.py",
		"/X/home/pi/GIT-REPO/Python/LnPythonLib/LnPyUtils/toYaml.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp19818/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/__main__.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp25581/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/ssh_Reverse_tunnel.sh",
		"/C/Users/Loreto/AppData/Local/Temp/scp49127/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/LnLib/ReadConfigurationFile.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp43409/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/Source/ParseInput.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp48679/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/LnPythonLib/LnPyUtils/ReadConfigurationFile.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp42502/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/gitUtils/lzip",
		"/C/Users/Loreto/AppData/Local/Temp/scp24435/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/pySSH.yml",
		"/C/Users/Loreto/AppData/Local/Temp/scp28478/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/LnPythonLib/LnParseInput/ParseInput.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp42267/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/gitUtils/lcommit",
		"/C/Users/Loreto/AppData/Local/Temp/scp49343/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/PiProd/shProc/moveCameraFiles.sh",
		"/C/Users/Loreto/AppData/Local/Temp/scp36497/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/ParseInput.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp48993/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/PyMount/bin/PyMount.zip",
		"/C/Users/Loreto/AppData/Local/Temp/scp14514/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/PyMount/conf/LnMount.yml",
		"/C/Users/Loreto/AppData/Local/Temp/scp33542/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/PyMount/__main__.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp34175/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/PyMount/Source/DeviceList.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp36791/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/LnPythonLib/LnPyUtils/splitString.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp34245/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/LnPythonLib/LnPyUtils/bytesToHuman.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp22337/HOME-LnPi31B-LnPi31B-192.168.1.31/etc/pure-ftpd/conf/ChrootEveryone",
		"/C/Users/Loreto/AppData/Local/Temp/scp22540/HOME-LnPi31B-LnPi31B-192.168.1.31/etc/pure-ftpd/conf/FSCharset",
		"/C/Users/Loreto/AppData/Local/Temp/scp22543/HOME-LnPi31B-LnPi31B-192.168.1.31/etc/pure-ftpd/conf/PureDB",
		"/C/Users/Loreto/AppData/Local/Temp/scp22525/HOME-LnPi31B-LnPi31B-192.168.1.31/etc/pure-ftpd/pureftpd-dir-aliases",
		"/C/Users/Loreto/AppData/Local/Temp/scp22006/HOME-LnPi31B-LnPi31B-192.168.1.31/etc/pure-ftpd/pureftpd.pdb",
		"/C/Users/Loreto/AppData/Local/Temp/scp21009/HOME-LnPi31B-LnPi31B-192.168.1.31/etc/pure-ftpd/pure-ftpd.conf",
		"/C/Users/Loreto/AppData/Local/Temp/scp10540/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/Examples/example_01.py",
		"/C/Users/Loreto/AppData/Local/Temp/scp20486/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/PiProd/shProc/ssh_Reverse_tunnel.sh",
		"/C/Users/Loreto/AppData/Local/Temp/scp40178/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/Python/pySSHRemoteTunnel/ssh_Reverse_tunnel.sh",
		"/C/Users/Loreto/AppData/Local/Temp/scp52240/HOME-LnPi31B-LnPi31B-192.168.1.31/home/pi/GIT-REPO/gitUtils/RepositoryStatus.yml",
		"/K/Filu/LnDisk/GIT-REPO/LnDOC/SSH/SSH_timeout.yml",
		"/K/Filu/LnDisk/GIT-REPO/LnDOC/SSH/scripts/SSH_SendKey_New.cmd",
		"/K/Filu/LnDisk/GIT-REPO/LnDOC/SSH/SSH_SendKey.txt",
		"/K/Filu/LnDisk/GIT-REPO/LnDOC/SSH/scripts/SSH-Tunnel_Sample.cmd",
		"/K/Filu/LnDisk/LnFree/Network/Telnet/Kitty/Sessions/LnPi31B/LnPi31B%20-%20192.168.1.31"
	],
	"find":
	{
		"height": 29.0
	},
	"find_in_files":
	{
		"height": 169.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"strftime",
			"sizeRotate",
			"target_dir",
			"sync",
			"fSYNC",
			"_fUPDATE",
			"fSYNC",
			"self._zf",
			"self.archive",
			"close(",
			"self.archive",
			"addFolder",
			"self._filename",
			"fMIRROR",
			"compression",
			"fSYNC",
			"addFolder",
			"fSYNC",
			"sync",
			"syncfSYNC",
			"getInfo",
			"fileExists",
			"getinfo",
			"                info=self._zf.getinfo(str(archive_name))\n",
			"getinfo",
			"this_compression",
			"} ",
			"self.logger",
			"{TAB",
			"TAB",
			"self.logger",
			"PosixPath",
			"addFolder",
			"execute",
			"yaml.load",
			"yaml",
			"self.log.numlevel",
			"self.logg.",
			"logg",
			"myLogger",
			"time",
			"log.date",
			"date",
			"fVERBOSE",
			"FullLoader",
			"load",
			"already_read_files",
			"types",
			"SimpleNamespace",
			"config_sections",
			"sections",
			"green(",
			"c_green",
			"c_yellow",
			"getColored",
			"Color",
			"color",
			"Color",
			"delete",
			"_this_file_path",
			"_this_path",
			"ZipFile",
			"already_read_files",
			"Logger",
			"logger",
			"load_yaml2",
			"processYamlData",
			"logger",
			"log_it",
			"fCRYPT",
			"fDEBUG",
			"fEXECUTE",
			"close",
			"LnZipClass",
			"close",
			"tempfile",
			"oneFolderOneZip",
			"execu",
			"LnZipClass",
			"oneFolderOneZip",
			"size",
			"req_compression",
			"addFolder",
			"oneFolderOneZip",
			"C.",
			"pdb",
			"open(",
			"autoreset",
			"_default",
			"rese",
			"YelloOnBlask",
			"reqPUSH",
			"gitBucket",
			"inp_args",
			"fCRYPT",
			"fDEBUG",
			"fEXECUTE",
			"excludeList",
			"check_dir",
			"LnPythonLib",
			"createZipFile",
			"reqBUILD",
			"createZipFile",
			"LnLib",
			"_targetCol",
			"_sourceCol",
			"'all'",
			"build",
			"createZipFile",
			"zip",
			"git_commit",
			"reqPUSH",
			"reqGO",
			"self._rotation_max_files",
			"self._rotation_max_file_size",
			"_rotation_max_file_size",
			"logg",
			"Logg",
			"logg",
			"Logg",
			"logg",
			"SimpleNamespace",
			"logArgs",
			"self._log_num_level",
			"logg.level",
			"self._fullpath_module",
			"self._log",
			"self._log_time"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/conf/zipBackup.yml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1096,
						"regions":
						{
						},
						"selection":
						[
							[
								738,
								738
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"function_name_status_row": 20,
							"incomplete_sync": null,
							"origPos":
							[
								0.0,
								0.0
							],
							"remote_loading": false,
							"syncScroll": false,
							"synced": false,
							"syntax": "Packages/YAML/YAML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/__main__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3125,
						"regions":
						{
						},
						"selection":
						[
							[
								1925,
								1925
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"function_name_status_row": 60,
							"incomplete_sync": null,
							"origPos":
							[
								0.0,
								720.0
							],
							"remote_loading": false,
							"syncScroll": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 300.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12626,
						"regions":
						{
						},
						"selection":
						[
							[
								11129,
								11136
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"default_dir": "K:\\Filu\\LnDisk\\GIT-REPO\\Python\\zipBackup\\LnLib",
							"function_name_status_row": 281,
							"incomplete_sync": null,
							"origPos":
							[
								0.0,
								4835.0
							],
							"remote_loading": false,
							"syncScroll": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4835.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/K/Filu/LnDisk/GIT-REPO/Python/zipBackup/LnLib/zipClass.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"function_name_status_row": 0,
							"incomplete_sync": null,
							"origPos":
							[
								0.0,
								0.0
							],
							"remote_loading": false,
							"syncScroll": false,
							"synced": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 59.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 130.0
	},
	"pinned_build_system": "",
	"project": "K-zip_Backup.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 139.0,
		"last_filter": "vi",
		"selected_items":
		[
			[
				"vi",
				"viewitems"
			],
			[
				"",
				"__getitem__"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 254.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
